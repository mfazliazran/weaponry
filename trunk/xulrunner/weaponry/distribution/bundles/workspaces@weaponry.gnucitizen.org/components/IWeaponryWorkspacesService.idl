/**
 *  IWeaponryWorkspacesService.idl
 *  Copyright (C) 2007-2011  GNUCITIZEN
 *  
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *  
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *  
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */

#include "nsISupports.idl"
#include "nsIFile.idl"
#include "nsISimpleEnumerator.idl"
#include "nsIDOMWindow.idl"

/* ------------------------------------------------------------------------ */

#include "IWeaponryWorkspace.idl"

/* ------------------------------------------------------------------------ */

interface IWeaponryWorkspacesTableAPI;
interface IWeaponryWorkspacesService;

/* ------------------------------------------------------------------------ */

[scriptable, uuid(d2c67c10-82bc-11df-8395-0800200c9a66)]
interface IWeaponryWorkspacesTableAPI : nsISupports {
	attribute AString retrieveTable;
	
	attribute AString insertTable;
	
	attribute AString updateTable;
	
	attribute AString deleteTable;
	
	attribute AString enumerateTable;
	
	/* -------------------------------------------------------------------- */
	
	attribute AString recordNotification;
	
	attribute AString updateNotification;
	
	attribute AString deleteNotification;
	
	/* -------------------------------------------------------------------- */
	
	AString retrieveTableItem(in IWeaponryWorkspace workspace, in AString parameters);
	
	void retrieveTableItemAsynchronously(in IWeaponryWorkspace workspace, in AString parameters, in IWeaponryWorkspaceTableItemResultCallbackHandler resultHandler, in IWeaponryWorkspaceTableItemCompletionCallbackHandler completionHandler);
	
	/* -------------------------------------------------------------------- */
	
	long insertTableItem(in IWeaponryWorkspace workspace, in AString parameters);
	
	void insertTableItemAsynchronously(in IWeaponryWorkspace workspace, in AString parameters, in IWeaponryWorkspaceTableItemCompletionCallbackHandler completionHandler);
	
	/* -------------------------------------------------------------------- */
	
	long recordTableItem(in IWeaponryWorkspace workspace, in AString parameters);
	
	void recordTableItemAsynchronously(in IWeaponryWorkspace workspace, in AString parameters, in IWeaponryWorkspaceTableItemCompletionCallbackHandler completionHandler);
	
	/* -------------------------------------------------------------------- */
	
	long updateTableItem(in IWeaponryWorkspace workspace, in AString parameters);
	
	void updateTableItemAsynchronously(in IWeaponryWorkspace workspace, in AString parameters, in IWeaponryWorkspaceTableItemCompletionCallbackHandler completionHandler);
	
	/* -------------------------------------------------------------------- */
	
	long deleteTableItem(in IWeaponryWorkspace workspace, in AString parameters);
	
	void deleteTableItemAsynchronously(in IWeaponryWorkspace workspace, in AString parameters, in IWeaponryWorkspaceTableItemCompletionCallbackHandler completionHandler);
	
	/* -------------------------------------------------------------------- */
	
	nsISimpleEnumerator enumerateTableItems(in IWeaponryWorkspace workspace, in AString parameters);
	
	void enumerateTableItemsAsynchronously(in IWeaponryWorkspace workspace, in AString parameters, in IWeaponryWorkspaceTableItemResultCallbackHandler resultHandler, in IWeaponryWorkspaceTableItemCompletionCallbackHandler completionHandler);
	
	/* -------------------------------------------------------------------- */
	
	void ensureTableColumns(in IWeaponryWorkspace workspace, in AString parameters);
	
	void ensureTableColumnsAsynchronously(in IWeaponryWorkspace workspace, in AString parameters, [optional] in IWeaponryWorkspaceTableItemCompletionCallbackHandler completionHandler);
	
	/* -------------------------------------------------------------------- */
	
	void createTable(in IWeaponryWorkspace workspace, in AString parameters);
	
	void createTableAsynchronously(in IWeaponryWorkspace workspace, in AString parameters, [optional] in IWeaponryWorkspaceTableItemCompletionCallbackHandler completionHandler);
};

/* ------------------------------------------------------------------------ */

[scriptable, uuid(1d4d5190-05ff-11df-8a39-0800200c9a66)]
interface IWeaponryWorkspacesService : nsISupports {
	nsIFile getWorkspacesDirectory();
	
	/* -------------------------------------------------------------------- */
	
	AString getWorkspaceFilename(in AString name);
	
	/* -------------------------------------------------------------------- */
	
	nsIFile getWorkspaceFile(in AString name);
	
	/* -------------------------------------------------------------------- */
	
	IWeaponryWorkspace getWorkspace(in AString name);
	
	/* -------------------------------------------------------------------- */
	
	IWeaponryWorkspace createWorkspace(in AString name);
	
	/* -------------------------------------------------------------------- */
	
	void destroyWorkspace(in AString name);
	
	/* -------------------------------------------------------------------- */
	
	void renameWorkspace(in AString name, in AString newName);
	
	void deleteWorkspace(in AString name);
	
	/* -------------------------------------------------------------------- */
	
	nsIDOMWindow getWorkspaceWindow(in AString name);
	
	nsIDOMWindow openWorkspaceWindow(in AString name);
	
	/* -------------------------------------------------------------------- */
	
	IWeaponryWorkspace importWorkspace(in nsIFile file, in AString name);
	
	IWeaponryWorkspace exportWorkspace(in AString name, in nsIFile file);
	
	/* -------------------------------------------------------------------- */
	
	nsISimpleEnumerator enumerateWorkspaces();
	
	void enumerateWorkspacesAsynchronously(in IWeaponryWorkspaceCallbackHandler handler, [optional] in IWeaponryWorkspaceCompletionCallbackHandler completionHandler);
	
	/* -------------------------------------------------------------------- */
	
	nsIDOMWindow openWorkspacesWindow();
	
	/* -------------------------------------------------------------------- */
	
	IWeaponryWorkspacesTableAPI getTableAPI(in AString table, in AString notificationPrefix);
};

/*  GNUCITIZEN (Information Security Think Tank)
 **********************************************/