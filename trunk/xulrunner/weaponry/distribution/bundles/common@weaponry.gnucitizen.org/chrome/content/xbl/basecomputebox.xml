<?xml version="1.0"?>
<!--
 *  basecomputebox.xml
 *  Copyright (C) 2007-2011  GNUCITIZEN
 *  
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *  
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *  
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-->
<!DOCTYPE bindings SYSTEM "chrome://common.weaponry.gnucitizen.org/locale/xbl/basecomputebox.dtd">
<bindings
	xmlns="http://www.mozilla.org/xbl"
	xmlns:xbl="http://www.mozilla.org/xbl"
	xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
	
	<binding id="basecomputebox" extends="chrome://common.weaponry.gnucitizen.org/content/xbl/basebox.xml#basebox">
		<implementation>
			<constructor>
				<action><![CDATA[
					this.fieldsComputer = {
						computers: [],
						
						registerFieldsComputer: function (computer) {
							this.computers.push(computer);
						},
						
						unregisterFieldsComputer: function (computer) {
							let computers = this.computers;
							let index = computers.indexOf(computer);
							
							if (index >= 0) {
								computers.splice(index, 1);
							}
						},
						
						enumerateRegisteredFieldsComputers: function () {
							return this.computers;
						},
						
						computeFields: function (fields) {
							let computersLength = this.computers.length;
							
							let i, computer;
							
							for (i = 0; i < computersLength; i += 1) {
								computer = this.computers[i];
								
								try {
									computer(fields);
								} catch (e) {
									Components.utils.reportError(e);
								}
							}
						}
					};
					
					this.registerFieldsComputer = function () {
						return this.fieldsComputer.registerFieldsComputer.apply(this.fieldsComputer, arguments);
					};
					
					this.unregisterFieldsComputer = function () {
						return this.fieldsComputer.unregisterFieldsComputer.apply(this.fieldsComputer, arguments);
					};
					
					this.computeFields = function () {
						return this.fieldsComputer.computeFields.apply(this.fieldsComputer, arguments);
					};
				]]></action>
			</constructor>
			
			<destructor>
				<action><![CDATA[
					let registeredFieldsComputers = this.fieldsComputer.enumerateRegisteredFieldsComputers();
					let registeredFieldsComputersLength = registeredFieldsComputers.length;
					
					let i;
					
					for (i = 0; i < registeredFieldsComputersLength; i += 1) {
						this.fieldsComputer.unregisterFieldsComputer(registeredFieldsComputers[i]);
					}
				]]></action>
			</destructor>
		</implementation>
	</binding>
	
</bindings>
<!--
 *  GNUCITIZEN (Information Security Think Tank)
 ***********************************************
-->