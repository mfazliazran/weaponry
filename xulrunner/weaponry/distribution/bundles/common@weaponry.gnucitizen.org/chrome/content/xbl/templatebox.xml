<?xml version="1.0"?>
<!--
 *  templatebox.xml
 *  Copyright (C) 2007-2011  GNUCITIZEN
 *  
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *  
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *  
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-->
<!DOCTYPE bindings SYSTEM "chrome://common.weaponry.gnucitizen.org/locale/xbl/templatebox.dtd">
<bindings
	xmlns="http://www.mozilla.org/xbl"
	xmlns:xbl="http://www.mozilla.org/xbl"
	xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
	
	<binding id="templatebox" extends="chrome://common.weaponry.gnucitizen.org/content/xbl/basecomputebox.xml#basecomputebox">
		<content>
			<xul:vbox class="templatebox-container" flex="1">
				<xul:vbox class="templatebox-content" hidden="true" flex="1"/>
				
				<xul:vbox class="templatebox-template" hidden="true">
					<children/>
				</xul:vbox>
			</xul:vbox>
		</content>
		
		<implementation>
			<property name="$container">
				<getter><![CDATA[
					return document.getAnonymousNodes(this)[0];
				]]></getter>
			</property>
			
			<property name="$content">
				<getter><![CDATA[
					return this.$container.childNodes[0];
				]]></getter>
			</property>
			
			<property name="$template">
				<getter><![CDATA[
					return this.$container.childNodes[1];
				]]></getter>
			</property>
			
			<method name="retemplate">
				<parameter name="$sourceNode"/>
				
				<body><![CDATA[
					while (this.hasChildNodes()) {
					    this.removeChild(this.lastChild);
					}
					
					let $nodes = $sourceNode.childNodes;
					let nodesLength = $nodes.length;
					
					let i;
					
					for (i = 0; i < nodesLength; i += 1) {
						this.appendChild($nodes[i].cloneNode(true));
					}
				]]></body>
			</method>
			
			<method name="refresh">
				<body><![CDATA[
					if (!this.lastUpdateFields) {
						return;
					}
					
					let fields = this.lastUpdateFields;
					let rememberedAttributes = {};
					
					this.$content.hidden = false;
					
					let $content = this.$content;
					let $nodes = $content.getElementsByAttribute('remember', '*');
					let nodesLength = $nodes.length;
					
					let i, $node, value, attributes, attributesLength, j, attribute;
					
					for (i = 0; i < nodesLength; i += 1) {
						$node = $nodes[i];
						
						if ($node.id) {
							values = {};
							attributes = $node.getAttribute('remember').split(',');
							attributesLength = attributes.length;
							
							for (j = 0; j < attributesLength; j += 1) {
								attribute = attributes[j].trim();
								
								values[attribute] = $node.getAttribute(attribute);
							}
							
							rememberedAttributes[$node.id] = values;
						}
					}
					
					$nodes = this.getElementsByTagName('*');
					nodesLength = $nodes.length;
					
					let $workNodes, $workNode;
					
					for (i = 0; i < nodesLength; i += 1) {
						$node = $nodes[i];
						attributes = $node.attributes;
						attributesLength = attributes.length;
						
						for (j = 0; j < attributesLength; j += 1) {
							attribute = attributes[j];
							
							if ((/\?\w+\^?/).test(attribute.value)) {
								$workNodes = $content.getElementsByAttribute('id', $node.id);
								
								if ($workNodes.length == 0) {
									continue;
								}
								
								$workNode = $workNodes[0];
								
								$workNode.setAttribute(attribute.name, attribute.value.replace(/\?\w+\^?/g, function (field) {
									let fieldName = field.substring(1).replace('^', '');
									
									if (fields[fieldName] != undefined) {
										return fields[fieldName];
									} else {
										return '';
									}
								}));
								
								if (attribute.name == 'textContent') {
									$workNode.textContent = attribute.value.replace(/\?\w+\^?/g, function (field) {
										let fieldName = field.substring(1).replace('^', '');
										
										if (fields[fieldName] != undefined) {
											return fields[fieldName];
										} else {
											return '';
										}
									});
								}
							}
						}
					}
					
					let id;
					
					for (id in rememberedAttributes) {
						$nodes = $content.getElementsByAttribute('id', id);
						nodesLength = $nodes.length;
						
						for (i = 0; i < nodesLength; i += 1) {
							$node = $nodes[i];
							attributes = rememberedAttributes[id];
							
							for (attribute in attributes) {
								$node.setAttribute(attribute, attributes[attribute]);
							}
						}
					}
				]]></body>
			</method>
			
			<method name="rebuild">
				<body><![CDATA[
					let $content = this.$content;
					
					while ($content.hasChildNodes()) {
					    $content.removeChild($content.lastChild);
					}
					
					let $nodes = this.childNodes;
					let length = $nodes.length;
					
					let i, $node;
					
					for (i = 0; i < length; i += 1) {
						$node = $nodes[i];
						
                        $content.appendChild($node.cloneNode(true));
					}
					
					this.refresh();
				]]></body>
			</method>
			
			<method name="update">
				<parameter name="fields"/>
				<parameter name="refresh"/>
				
				<body><![CDATA[
					if (!fields) {
						throw new Error('no fields specified');
					}
					
					this.computeFields(fields);
					
					this.lastUpdateFields = fields;
					
					if (refresh != false) {
						this.refresh();
					}
				]]></body>
			</method>
			
			<constructor>
				<action><![CDATA[
					this._bindEvent(this, 'DOMSubtreeModified', function (event) {
						if (event.originalTarget == this) {
							this.rebuild();
						}
					});
					
					this.rebuild();
				]]></action>
			</constructor>
			
			<destructor>
				<action><![CDATA[
					// pass
				]]></action>
			</destructor>
		</implementation>
	</binding>
	
</bindings>
<!--
 *  GNUCITIZEN (Information Security Think Tank)
 ***********************************************
-->