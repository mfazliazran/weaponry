#summary This page discussed the overall design of the Weaponry system. We are going to look into the main structure blocks. Feel free to add your suggestions/comments.

= Workspaces =

The workspace is an XUL page which contains a number of APIs and a reference to a persistent storage (perhaps sqlite). The workspace is the primary way for starting a pentesting/mashup/development task. The environment should be able to work with several workspaces open at the same time (presumably opened in different tabs or windows).

Workspaces can be extended by any other extensions with the help of overlays. Overlays can interact with the workspace by either manipulating the DOM or by using the APIs introduced by the core components or by any other pluggable component (xpt extensions). Workspace APIs should provide access to the persistent storage and also the ability to load and save the storage data. Extension authors should not deal with storing/saving and loading their data. It all should be transparent and handled the core system! However, extension authors should be able to provide the ability to export the data in their own format (perhaps custom reporting engines, etc).

It should be possible to merge workspaces. If we start one web application security project and one infrastructure security project, we should be able to merge both into a new project. It might be also beneficial to be able to create pseudo workspaces which are merely abstract interfaces to one or more workspaces. This would mean that changes in any of the workspaces should result into changes in the pseudo workspace.

Extensions which overlay the workspace should provide additional functionalities in terms of APIs and of course GUI elements rendered inside the workspace page. For example, if the workspace is of type "standard infrastructure test", extensions should be able to add buttons, features and in general UI for launching tools which interact with the targets and potentially the workspace persistent storage, i.e. a DNS enumeration extension should hook its own UI controls into the workspace so that the user can click on a button to launch the enumeration tool which in turn should merge its findings with the persistent storage.

*NOTES:* It is preferable to have a standard workspace environment for many kinds of workspaces. It is not clear yet how to create workspaces of different kinds but a possible suggestion is to have some kind of wizard which allows the user to first choose a name for the workspace and second to select the workspace type. Extensions authors should be able to overlay the wizard and as such provide additional workspace types and of course, wizard functionalities. It is important to make sure that it is straightforward to add new wizard pages.

The reason why we need different workspace types is because we may want to do different kinds of projects. One project could be related to normal pentesting while another could be related to malware research. Workspace extensions should be able to differentiate the type of workspace my using simple overlays without the need to use any code.


= Toolkit =

While workspaces provide integrated means for doing a set of related tasks, the toolkit is responsible for launching standalone features only. There are many situations where you just want to run a particular tool or communicate with a particular service without the need to start a new workspace. The system should provide means for easily doing that.

Toolkits are provided as extensions. It should be trivial to register a new toolkit. The registration process should only take a couple of lines of XUL. The system should avoid using code and subroutines which may get deprecated with the time.

Toolkits are usually launched in their own tabs/windows. Each toolkit leaves in its own XUL page.


= Services =

Heavy tasks such as long running scan process should be offloaded to service modules. The reason for this is because services can run locally and remotely as well. A central system should contain all the references to currently registered services. Extension authors should be able to interact with registered services without the need to perform authentication and other bits and pieces which can be abstracted.

*NOTES:* Perhaps it is better to keep the service architecture as simple as possible. At the moment we are looking into XMLRPC as it is supported by many platforms and it is usually very trivial to work with. New services can be registered via extensions or via a configuration panel. The access credentials (or keys) for the service should be specified inside the service management panel. The system should provide a generic interface to communicate with any service. For example, if the developer wants to communicate with a portscanning service they first need to know its name, let's say "nmap", and also the methods the service supports, let's say "scan". A typical service call should look something like this:

{{{
services.nmap.scan(target);
}}}

This call will invoke the XMLRPC call of the "scan" method on the "nmap" service.

We should promote code reusability! We certainly do not want to lock developers into the platform. This means that if someone writes a good module in python that they use in a command line tool, it should be trivial for him to integrate it into a service. Python's XMLRPC interface provides the ability to register whole objects as XMLRPC services.


= Feeds =

Certain extensions might want to get status reports from services or even use data from a 3rd-party system. Although service developers can provide relevant API for doing so, sometimes it just might be easier to use ATOM/RSS feeds. For example, the portscanning service could provide an ATOM feed for the currently running scans and their progress.

*NOTES:* At the moment it is unknown whether feeds need to be registered. After all, feeds may contain sensitive information and therefore they should be protected with access controls. It needs to be ensured that registration process is transparent. It is preferable not to have one.


= Sidebars and Bottombars =

Sometimes developers may want to provide additional functionalities to a workspace, a toolkit or a tab that contains a service without the need to overlay it. For example, some toolkits may write their findings by using microformats. An extension author may decide to create a sidebar for capturing any microformat data and import it into any arbitrary workspace. It is obvious that this type of application functionality should feel more like part of the core environment rather then being part of a workspace or overlay of a particular tool. This is where sidebars and bottombars come into place.

Registration process of new sidebars and bottombars should be trivial.


= Theming =

The core UI needs to be written in such a way that whole blocks can be replaced without affecting any of the extensions. For example, some environments may require the need to use minimalistic environments (mobile phones) it should be possible to change the core default view in a such a way that applications still work. We might need to add support APIs just to do this.